// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SynthSettings.Repositories;

#nullable disable

namespace SynthSettings.Repositories.Migrations
{
    [DbContext(typeof(SettingContext))]
    partial class SettingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SynthSettings.Repositories.Entities.ADSREntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<int>("Delay")
                        .HasColumnType("integer");

                    b.Property<int>("Release")
                        .HasColumnType("integer");

                    b.Property<int>("Sustain")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ADSRs");
                });

            modelBuilder.Entity("SynthSettings.Repositories.Entities.EnvelopeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ADSRId")
                        .HasColumnType("uuid");

                    b.Property<int>("Amplitude")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ADSRId");

                    b.ToTable("Envelopes");
                });

            modelBuilder.Entity("SynthSettings.Repositories.Entities.FilterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ADSRId")
                        .HasColumnType("uuid");

                    b.Property<int>("Cutoff")
                        .HasColumnType("integer");

                    b.Property<int>("Resonance")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ADSRId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("SynthSettings.Repositories.Entities.OscillatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Pitch")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Oscillators");
                });

            modelBuilder.Entity("SynthSettings.Repositories.Entities.SettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EnvelopeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FilterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OscillatorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EnvelopeId");

                    b.HasIndex("FilterId");

                    b.HasIndex("OscillatorId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("SynthSettings.Repositories.Entities.EnvelopeEntity", b =>
                {
                    b.HasOne("SynthSettings.Repositories.Entities.ADSREntity", "ADSR")
                        .WithMany()
                        .HasForeignKey("ADSRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ADSR");
                });

            modelBuilder.Entity("SynthSettings.Repositories.Entities.FilterEntity", b =>
                {
                    b.HasOne("SynthSettings.Repositories.Entities.ADSREntity", "ADSR")
                        .WithMany()
                        .HasForeignKey("ADSRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ADSR");
                });

            modelBuilder.Entity("SynthSettings.Repositories.Entities.SettingEntity", b =>
                {
                    b.HasOne("SynthSettings.Repositories.Entities.EnvelopeEntity", "Envelope")
                        .WithMany()
                        .HasForeignKey("EnvelopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SynthSettings.Repositories.Entities.FilterEntity", "Filter")
                        .WithMany()
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SynthSettings.Repositories.Entities.OscillatorEntity", "Oscillator")
                        .WithMany()
                        .HasForeignKey("OscillatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Envelope");

                    b.Navigation("Filter");

                    b.Navigation("Oscillator");
                });
#pragma warning restore 612, 618
        }
    }
}
